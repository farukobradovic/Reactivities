[{"C:\\Users\\Faruk\\Desktop\\Reactivities\\client-app\\src\\index.tsx":"1","C:\\Users\\Faruk\\Desktop\\Reactivities\\client-app\\src\\reportWebVitals.ts":"2","C:\\Users\\Faruk\\Desktop\\Reactivities\\client-app\\src\\app\\layout\\App.tsx":"3","C:\\Users\\Faruk\\Desktop\\Reactivities\\client-app\\src\\features\\nav\\NavBar.tsx":"4","C:\\Users\\Faruk\\Desktop\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityDashboard.tsx":"5","C:\\Users\\Faruk\\Desktop\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityList.tsx":"6","C:\\Users\\Faruk\\Desktop\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetails.tsx":"7","C:\\Users\\Faruk\\Desktop\\Reactivities\\client-app\\src\\features\\activities\\form\\ActivityForm.tsx":"8","C:\\Users\\Faruk\\Desktop\\Reactivities\\client-app\\src\\app\\api\\agent.ts":"9","C:\\Users\\Faruk\\Desktop\\Reactivities\\client-app\\src\\app\\layout\\LoadingComponent.tsx":"10","C:\\Users\\Faruk\\Desktop\\Reactivities\\client-app\\src\\app\\stores\\activityStore.ts":"11","C:\\Users\\Faruk\\Desktop\\Reactivities\\client-app\\src\\features\\home\\HomePage.tsx":"12","C:\\Users\\Faruk\\Desktop\\Reactivities\\client-app\\src\\app\\layout\\ScrollToTop.tsx":"13","C:\\Users\\Faruk\\Desktop\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivitiyListItem.tsx":"14","C:\\Users\\Faruk\\Desktop\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetailedChat.tsx":"15","C:\\Users\\Faruk\\Desktop\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetailedInfo.tsx":"16","C:\\Users\\Faruk\\Desktop\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetailedHeader.tsx":"17","C:\\Users\\Faruk\\Desktop\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetailedSideBar.tsx":"18","C:\\Users\\Faruk\\Desktop\\Reactivities\\client-app\\src\\app\\layout\\NotFound.tsx":"19","C:\\Users\\Faruk\\Desktop\\Reactivities\\client-app\\src\\app\\common\\form\\TextInput.tsx":"20","C:\\Users\\Faruk\\Desktop\\Reactivities\\client-app\\src\\app\\common\\form\\TextAreaInput.tsx":"21","C:\\Users\\Faruk\\Desktop\\Reactivities\\client-app\\src\\app\\common\\form\\SelectInput.tsx":"22","C:\\Users\\Faruk\\Desktop\\Reactivities\\client-app\\src\\app\\common\\options\\CategoryOptions.ts":"23","C:\\Users\\Faruk\\Desktop\\Reactivities\\client-app\\src\\app\\common\\form\\DateInput.tsx":"24","C:\\Users\\Faruk\\Desktop\\Reactivities\\client-app\\src\\app\\common\\util\\util.ts":"25","C:\\Users\\Faruk\\Desktop\\Reactivities\\client-app\\src\\app\\models\\activity.ts":"26","C:\\Users\\Faruk\\Desktop\\Reactivities\\client-app\\src\\app\\stores\\rootStore.ts":"27","C:\\Users\\Faruk\\Desktop\\Reactivities\\client-app\\src\\app\\stores\\userStore.ts":"28","C:\\Users\\Faruk\\Desktop\\Reactivities\\client-app\\src\\features\\user\\LoginForm.tsx":"29","C:\\Users\\Faruk\\Desktop\\Reactivities\\client-app\\src\\app\\stores\\commonStore.ts":"30","C:\\Users\\Faruk\\Desktop\\Reactivities\\client-app\\src\\app\\stores\\modalStore.ts":"31","C:\\Users\\Faruk\\Desktop\\Reactivities\\client-app\\src\\app\\common\\modals\\ModalContainer.tsx":"32","C:\\Users\\Faruk\\Desktop\\Reactivities\\client-app\\src\\app\\common\\form\\ErrorMessage.tsx":"33","C:\\Users\\Faruk\\Desktop\\Reactivities\\client-app\\src\\features\\user\\RegisterForm.tsx":"34"},{"size":944,"mtime":1607546795976,"results":"35","hashOfConfig":"36"},{"size":425,"mtime":499162500000,"results":"37","hashOfConfig":"36"},{"size":2415,"mtime":1607876892785,"results":"38","hashOfConfig":"36"},{"size":1853,"mtime":1607861543210,"results":"39","hashOfConfig":"36"},{"size":964,"mtime":1607807667820,"results":"40","hashOfConfig":"36"},{"size":1030,"mtime":1607807854988,"results":"41","hashOfConfig":"36"},{"size":1556,"mtime":1607807916978,"results":"42","hashOfConfig":"36"},{"size":6557,"mtime":1607807939296,"results":"43","hashOfConfig":"36"},{"size":3428,"mtime":1607862886465,"results":"44","hashOfConfig":"36"},{"size":326,"mtime":1607113234250,"results":"45","hashOfConfig":"36"},{"size":4653,"mtime":1607809179476,"results":"46","hashOfConfig":"36"},{"size":1922,"mtime":1607880148022,"results":"47","hashOfConfig":"36"},{"size":293,"mtime":1607295101830,"results":"48","hashOfConfig":"36"},{"size":1322,"mtime":1607618328548,"results":"49","hashOfConfig":"36"},{"size":1829,"mtime":1607340269684,"results":"50","hashOfConfig":"36"},{"size":1526,"mtime":1607550825336,"results":"51","hashOfConfig":"36"},{"size":1998,"mtime":1607550819508,"results":"52","hashOfConfig":"36"},{"size":1875,"mtime":1607340402739,"results":"53","hashOfConfig":"36"},{"size":551,"mtime":1607374518080,"results":"54","hashOfConfig":"36"},{"size":721,"mtime":1607542325157,"results":"55","hashOfConfig":"36"},{"size":675,"mtime":1607543599293,"results":"56","hashOfConfig":"36"},{"size":846,"mtime":1607544060334,"results":"57","hashOfConfig":"36"},{"size":346,"mtime":1607543943369,"results":"58","hashOfConfig":"36"},{"size":1029,"mtime":1607618062211,"results":"59","hashOfConfig":"36"},{"size":354,"mtime":1607551483013,"results":"60","hashOfConfig":"36"},{"size":745,"mtime":1607555535203,"results":"61","hashOfConfig":"36"},{"size":734,"mtime":1607876237234,"results":"62","hashOfConfig":"36"},{"size":1993,"mtime":1607879964929,"results":"63","hashOfConfig":"36"},{"size":2104,"mtime":1607877951067,"results":"64","hashOfConfig":"36"},{"size":958,"mtime":1607867062446,"results":"65","hashOfConfig":"36"},{"size":606,"mtime":1607876801129,"results":"66","hashOfConfig":"36"},{"size":546,"mtime":1607876690599,"results":"67","hashOfConfig":"36"},{"size":725,"mtime":1607880555958,"results":"68","hashOfConfig":"36"},{"size":2422,"mtime":1607880187986,"results":"69","hashOfConfig":"36"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"73"},"f9sps8",{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"73"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"73"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"73"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"73"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"73"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"73"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"73"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"73"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Faruk\\Desktop\\Reactivities\\client-app\\src\\index.tsx",["148"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./app/layout/styles.css\";\nimport App from \"./app/layout/App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter, Router } from \"react-router-dom\";\nimport ScrollToTop from \"./app/layout/ScrollToTop\";\nimport { createBrowserHistory } from \"history\";\nimport \"react-toastify/dist/ReactToastify.min.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\n\nimport dateFnsLocalizer from \"react-widgets-date-fns\";\nexport const history = createBrowserHistory();\ndateFnsLocalizer();\n\nReactDOM.render(\n  <Router history={history}>\n    <ScrollToTop>\n      <App />\n    </ScrollToTop>\n  </Router>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["149","150"],"C:\\Users\\Faruk\\Desktop\\Reactivities\\client-app\\src\\reportWebVitals.ts",[],"C:\\Users\\Faruk\\Desktop\\Reactivities\\client-app\\src\\app\\layout\\App.tsx",[],"C:\\Users\\Faruk\\Desktop\\Reactivities\\client-app\\src\\features\\nav\\NavBar.tsx",["151"],"import { observer } from \"mobx-react-lite\";\r\nimport React, { useContext } from \"react\";\r\nimport { Link, NavLink } from \"react-router-dom\";\r\nimport { Menu, Container, Button, Dropdown, Image } from \"semantic-ui-react\";\r\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\r\n\r\nconst NavBar: React.FC = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const { isLoggedIn, user, logout } = rootStore.userStore;\r\n  return (\r\n    <div>\r\n      <Menu inverted fixed='top'>\r\n        <Container>\r\n          <Menu.Item header as={NavLink} exact to='/'>\r\n            <img\r\n              src='/assets/logo.png'\r\n              alt='logo'\r\n              style={{ marginRight: \"10px\" }}\r\n            ></img>\r\n            Reactivities\r\n          </Menu.Item>\r\n          <Menu.Item name='Activities' as={NavLink} to='/activities' />\r\n          <Menu.Item>\r\n            <Button\r\n              as={NavLink}\r\n              to='/createActivity'\r\n              positive\r\n              content='Create Activity'\r\n            />\r\n          </Menu.Item>\r\n          {user && (\r\n            <Menu.Item position='right'>\r\n              <Image\r\n                avatar\r\n                spaced='right'\r\n                src={user.image || \"/assets/user.png\"}\r\n              />\r\n              <Dropdown pointing='top left' text={user.displayName}>\r\n                <Dropdown.Menu>\r\n                  <Dropdown.Item\r\n                    as={Link}\r\n                    to={`/profile/username`}\r\n                    text='My profile'\r\n                    icon='user'\r\n                  />\r\n                  <Dropdown.Item text='Logout' icon='power' onClick={logout} />\r\n                </Dropdown.Menu>\r\n              </Dropdown>\r\n            </Menu.Item>\r\n          )}\r\n        </Container>\r\n      </Menu>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default observer(NavBar);\r\n","C:\\Users\\Faruk\\Desktop\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityDashboard.tsx",["152"],"import { observer } from \"mobx-react-lite\";\r\nimport React, { useContext, useEffect } from \"react\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport ActivityList from \"./ActivityList\";\r\nimport { LoadingComponent } from \"../../../app/layout/LoadingComponent\";\r\nimport { RootStore, RootStoreContext } from \"../../../app/stores/rootStore\";\r\n\r\nconst ActivityDashboard: React.FC = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const { loadActivities, loadingInitial } = rootStore.activityStore;\r\n  useEffect(() => {\r\n    loadActivities();\r\n  }, [loadActivities]);\r\n\r\n  if (loadingInitial) return <LoadingComponent content='Loading activities' />;\r\n\r\n  return (\r\n    <Grid>\r\n      <Grid.Column width={10}>\r\n        <ActivityList />\r\n      </Grid.Column>\r\n      <Grid.Column width={6}>\r\n        <h2>Activity filters</h2>\r\n      </Grid.Column>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default observer(ActivityDashboard);\r\n\r\n// export default ActivityDashboard;\r\n","C:\\Users\\Faruk\\Desktop\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityList.tsx",["153","154"],"import { observer } from \"mobx-react-lite\";\r\nimport React, { Fragment, useContext } from \"react\";\r\nimport { Item, Label } from \"semantic-ui-react\";\r\nimport ActivityStore from \"../../../app/stores/activityStore\";\r\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\r\nimport ActivitiyListItem from \"./ActivitiyListItem\";\r\n\r\nconst ActivityList: React.FC = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const { activitiesByDate, deleteActivity } = rootStore.activityStore;\r\n  return (\r\n    <Fragment>\r\n      {activitiesByDate.map(([group, activities]) => (\r\n        <Fragment key={group}>\r\n          <Label size='large' color='blue'>\r\n            {group}\r\n          </Label>\r\n          <Item.Group divided>\r\n            {activities.map((activity) => (\r\n              <ActivitiyListItem key={activity.id} activity={activity} />\r\n            ))}\r\n          </Item.Group>\r\n        </Fragment>\r\n      ))}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default observer(ActivityList);\r\n// export default ActivityList;\r\n","C:\\Users\\Faruk\\Desktop\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetails.tsx",["155"],"import { observer } from \"mobx-react-lite\";\r\nimport React, { useContext, useEffect } from \"react\";\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport { LoadingComponent } from \"../../../app/layout/LoadingComponent\";\r\nimport ActivityStore from \"../../../app/stores/activityStore\";\r\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\r\nimport { ActivityDetailedChat } from \"./ActivityDetailedChat\";\r\nimport ActivityDetailedHeader from \"./ActivityDetailedHeader\";\r\nimport { ActivityDetailedInfo } from \"./ActivityDetailedInfo\";\r\nimport { ActivityDetailedSideBar } from \"./ActivityDetailedSideBar\";\r\n\r\ninterface DetailParams {\r\n  id: string;\r\n}\r\n\r\nconst ActivityDetails: React.FC<RouteComponentProps<DetailParams>> = ({\r\n  match,\r\n  history,\r\n}) => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const { activity, loadActivity, loadingInitial } = rootStore.activityStore;\r\n\r\n  useEffect(() => {\r\n    loadActivity(match.params.id);\r\n  }, [loadActivity, match.params.id]);\r\n\r\n  if (loadingInitial || !activity)\r\n    return <LoadingComponent content='Loading activity' />;\r\n\r\n  if (!activity) {\r\n  }\r\n\r\n  return (\r\n    <Grid>\r\n      <Grid.Column width={10}>\r\n        <ActivityDetailedHeader activity={activity} />\r\n        <ActivityDetailedInfo activity={activity} />\r\n        <ActivityDetailedChat />\r\n      </Grid.Column>\r\n      <Grid.Column width={6}>\r\n        <ActivityDetailedSideBar />\r\n      </Grid.Column>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default observer(ActivityDetails);\r\n","C:\\Users\\Faruk\\Desktop\\Reactivities\\client-app\\src\\features\\activities\\form\\ActivityForm.tsx",["156","157","158"],"import React, { useState, FormEvent, useContext, useEffect } from \"react\";\r\nimport { Button, Form, Grid, Segment } from \"semantic-ui-react\";\r\nimport { ActivityFormValues } from \"../../../app/models/activity\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport ActivityStore from \"../../../app/stores/activityStore\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\nimport { Form as FinalForm, Field } from \"react-final-form\";\r\nimport TextInput from \"../../../app/common/form/TextInput\";\r\nimport { TextAreaInput } from \"../../../app/common/form/TextAreaInput\";\r\nimport SelectInput from \"../../../app/common/form/SelectInput\";\r\nimport { category } from \"../../../app/common/options/CategoryOptions\";\r\nimport DateInput from \"../../../app/common/form/DateInput\";\r\nimport { combineDateAndTime } from \"../../../app/common/util/util\";\r\nimport {\r\n  combineValidators,\r\n  composeValidators,\r\n  hasLengthGreaterThan,\r\n  isRequired,\r\n} from \"revalidate\";\r\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\r\n\r\nconst validate = combineValidators({\r\n  title: isRequired({ message: \"The event title is required\" }),\r\n  category: isRequired(\"Category\"),\r\n  description: composeValidators(\r\n    isRequired(\"Description\"),\r\n    hasLengthGreaterThan(4)({\r\n      message: \"Description needs to be at least 5 characters\",\r\n    })\r\n  )(),\r\n  city: isRequired(\"City\"),\r\n  venue: isRequired(\"Venue\"),\r\n  date: isRequired(\"Date\"),\r\n  time: isRequired(\"Time\"),\r\n});\r\n\r\ninterface DetailParams {\r\n  id: string;\r\n}\r\n\r\nconst ActivityForm: React.FC<RouteComponentProps<DetailParams>> = ({\r\n  match,\r\n  history,\r\n}) => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const {\r\n    createActivity,\r\n    editActivity,\r\n    submitting,\r\n    activity: initialFormState,\r\n    loadActivity,\r\n  } = rootStore.activityStore;\r\n\r\n  // const initializeForm = () => {\r\n  //   if (initialFormState) {\r\n  //     return initialFormState;\r\n  //   } else {\r\n  //     return {\r\n  //       id: \"\",\r\n  //       title: \"\",\r\n  //       category: \"\",\r\n  //       description: \"\",\r\n  //       date: undefined,\r\n  //       time: undefined,\r\n  //       city: \"\",\r\n  //       venue: \"\",\r\n  //     };\r\n  //   }\r\n  // };\r\n\r\n  const [activity, setActivity] = useState(new ActivityFormValues());\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (match.params.id) {\r\n      setLoading(true);\r\n      loadActivity(match.params.id)\r\n        .then(\r\n          //ovdje vracamo activity inace bi bio promise\r\n          (activity) => setActivity(new ActivityFormValues(activity))\r\n        )\r\n        .finally(() => setLoading(false));\r\n    }\r\n  }, [loadActivity, match.params.id]);\r\n\r\n  // const handleSubmit = () => {\r\n  //   if (activity.id.length === 0) {\r\n  //     let newActivity = {\r\n  //       ...activity,\r\n  //       id: uuid(),\r\n  //     };\r\n  //     createActivity(newActivity).then(() =>\r\n  //       history.push(`/activities/${newActivity.id}`)\r\n  //     );\r\n  //   } else {\r\n  //     editActivity(activity).then(() =>\r\n  //       history.push(`/activities/${activity.id}`)\r\n  //     );\r\n  //   }\r\n  // };\r\n\r\n  const handleFinalFormSubmit = (values: any) => {\r\n    const dateAndTime = combineDateAndTime(values.date, values.time);\r\n    const { date, time, ...activity } = values;\r\n    activity.date = dateAndTime;\r\n    if (!activity.id) {\r\n      let newActivity = {\r\n        ...activity,\r\n        id: uuid(),\r\n      };\r\n      createActivity(newActivity);\r\n    } else {\r\n      editActivity(activity);\r\n    }\r\n  };\r\n  // const handleInputChange = (\r\n  //   e: FormEvent<HTMLInputElement | HTMLTextAreaElement>\r\n  // ) => {\r\n  //   setActivity({ ...activity, [e.currentTarget.name]: e.currentTarget.value });\r\n  // };\r\n  return (\r\n    <Grid>\r\n      <Grid.Column width={10}>\r\n        <Segment clearing>\r\n          <FinalForm\r\n            validate={validate}\r\n            initialValues={activity}\r\n            onSubmit={handleFinalFormSubmit}\r\n            render={({ handleSubmit, invalid, pristine }) => (\r\n              <Form onSubmit={handleSubmit} loading={loading}>\r\n                <Field\r\n                  placeholder='Title'\r\n                  value={activity.title}\r\n                  name='title'\r\n                  component={TextInput}\r\n                />\r\n                <Field\r\n                  placeholder='Description'\r\n                  value={activity.description}\r\n                  name='description'\r\n                  rows={3}\r\n                  component={TextAreaInput}\r\n                />\r\n                <Field\r\n                  placeholder='Category'\r\n                  value={activity.category}\r\n                  name='category'\r\n                  component={SelectInput}\r\n                  options={category}\r\n                />\r\n                <Form.Group widths='equal'>\r\n                  <Field\r\n                    component={DateInput}\r\n                    placeholder='Date'\r\n                    value={activity.date}\r\n                    name='date'\r\n                    date={true}\r\n                  />\r\n                  <Field\r\n                    component={DateInput}\r\n                    placeholder='Time'\r\n                    value={activity.date}\r\n                    name='time'\r\n                    time={true}\r\n                  />\r\n                </Form.Group>\r\n\r\n                <Field\r\n                  placeholder='City'\r\n                  value={activity.city}\r\n                  component={TextInput}\r\n                  name='city'\r\n                />\r\n                <Field\r\n                  placeholder='Venue'\r\n                  value={activity.venue}\r\n                  component={TextInput}\r\n                  name='venue'\r\n                />\r\n                <Button\r\n                  floated='right'\r\n                  positive\r\n                  type='submit'\r\n                  content='Submit'\r\n                  loading={submitting}\r\n                  disabled={loading || invalid || pristine}\r\n                />\r\n                <Button\r\n                  onClick={\r\n                    activity.id\r\n                      ? () => history.push(`/activities/${activity.id}`)\r\n                      : () => history.push(\"/activities\")\r\n                  }\r\n                  floated='right'\r\n                  type='button'\r\n                  content='Cancel'\r\n                />\r\n              </Form>\r\n            )}\r\n          />\r\n        </Segment>\r\n      </Grid.Column>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default observer(ActivityForm);\r\n","C:\\Users\\Faruk\\Desktop\\Reactivities\\client-app\\src\\app\\api\\agent.ts",["159"],"import axios, { AxiosResponse } from 'axios';\r\nimport { IActivity } from '../models/activity';\r\nimport {history} from \"../../\";\r\nimport { toast } from 'react-toastify';\r\nimport { IUser, IUserFormValues } from '../models/user';\r\n\r\naxios.defaults.baseURL =\"http://localhost:5000/api\";\r\n\r\naxios.interceptors.request.use((config) => {\r\n    const token = window.localStorage.getItem(\"jwt\");\r\n    if(token)\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n    return config;\r\n}, error => {\r\n    return Promise.reject(error);\r\n})\r\n\r\naxios.interceptors.response.use(undefined, error => {\r\n    const {status, data, config} = error.response;\r\n    if(error.message === \"Network Error\" && !error.response){\r\n        toast.error(\"Network error - make sure API is running!\")\r\n    }\r\n    //baca error ako pretraziva nepostojeci guid, tj kad je cifra zamjeni\r\n    if(status === 404){\r\n        history.push(\"/notFound\");\r\n    }\r\n    //ako je guid nevazeci tj nije guid, npr kad se izbirse par cifri\r\n    if(status === 400 && config.method === \"get\" && data.errors.hasOwnProperty(\"id\")){\r\n        history.push(\"/notFound\");\r\n    }\r\n    if(status === 500){\r\n        toast.error(\"Server error - check the terminal for more info!\");\r\n    }\r\n    console.log(error.response);\r\n    throw error.response;\r\n\r\n})\r\n\r\nconst responseBody = (response: AxiosResponse) => response.data;\r\n\r\nconst sleep = (ms: number) => (response: AxiosResponse) => new Promise<AxiosResponse>(resolve => setTimeout(() => resolve(response), ms));\r\n\r\nconst requests = {\r\n    get: (url: string) => axios.get(url).then(sleep(1000)).then(responseBody),\r\n    post: (url: string, body: {}) => axios.post(url, body).then(sleep(1000)).then(responseBody),\r\n    put: (url: string, body: {}) => axios.put(url, body).then(sleep(1000)).then(responseBody),\r\n    del: (url: string) => axios.delete(url).then(sleep(1000)).then(responseBody)\r\n}\r\n\r\n//Activities calls\r\nconst Activities = {\r\n    list: (): Promise<IActivity[]> => requests.get(\"/activities\"),\r\n    details: (id: string) => requests.get(`/activities/${id}`),\r\n    create: (activity: IActivity) => requests.post(\"/activities\", activity),\r\n    update: (activity: IActivity) => requests.put(`/activities/${activity.id}`, activity),\r\n    delete: (id: string) => requests.del(`/activities/${id}`)\r\n}\r\n\r\n//User calls\r\nconst User = {\r\n    current: (): Promise<IUser> => requests.get(\"/user\"),\r\n    login: (user: IUserFormValues): Promise<IUser> => requests.post(\"/user/login\", user),\r\n    register: (user: IUserFormValues): Promise<IUser> => requests.post(\"/user/register\", user),\r\n};\r\n\r\n\r\nexport default{\r\n    Activities,\r\n    User\r\n}\r\n\r\n\r\n\r\n// const requests = {\r\n//     get: (url: string) => axios.get(url).then(responseBody),\r\n//     post: (url: string, body: {}) => axios.post(url, body).then(responseBody),\r\n//     put: (url: string, body: {}) => axios.put(url, body).then(responseBody),\r\n//     del: (url: string) => axios.delete(url).then(responseBody)\r\n// }\r\n\r\n// const Activities = {\r\n//     list: (): Promise<IActivity[]> => requests.get(\"/activities\"),\r\n//     details: (id: string) => requests.get(`/activities/${id}`),\r\n//     create: (activity: IActivity) => requests.post(\"/activities\", activity),\r\n//     update: (activity: IActivity) => requests.put(`/activities/${activity.id}`, activity),\r\n//     delete: (id: string) => requests.del(`/activities/${id}`)\r\n// }\r\n\r\n// export default{\r\n//     Activities\r\n// }\r\n\r\n\r\n","C:\\Users\\Faruk\\Desktop\\Reactivities\\client-app\\src\\app\\layout\\LoadingComponent.tsx",[],"C:\\Users\\Faruk\\Desktop\\Reactivities\\client-app\\src\\app\\stores\\activityStore.ts",[],"C:\\Users\\Faruk\\Desktop\\Reactivities\\client-app\\src\\features\\home\\HomePage.tsx",[],"C:\\Users\\Faruk\\Desktop\\Reactivities\\client-app\\src\\app\\layout\\ScrollToTop.tsx",[],"C:\\Users\\Faruk\\Desktop\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivitiyListItem.tsx",["160","161"],"import React, { useContext } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Icon, Item, Label, Segment } from \"semantic-ui-react\";\r\nimport { IActivity } from \"../../../app/models/activity\";\r\nimport { format } from \"date-fns\";\r\n\r\nconst ActivitiyListItem: React.FC<{ activity: IActivity }> = ({ activity }) => {\r\n  return (\r\n    <Segment.Group>\r\n      <Segment>\r\n        <Item.Group>\r\n          <Item>\r\n            <Item.Image size='tiny' circular src='/assets/user.png' />\r\n            <Item.Content>\r\n              <Item.Header as='a'>{activity.title}</Item.Header>\r\n              <Item.Description>Hosted By Bob</Item.Description>\r\n            </Item.Content>\r\n          </Item>\r\n        </Item.Group>\r\n      </Segment>\r\n      <Segment>\r\n        <Icon name='clock' />\r\n        {format(activity.date, \"h:mm:a\")}\r\n        <Icon name='marker' />\r\n        {activity.venue}, {activity.city}\r\n      </Segment>\r\n      <Segment secondary>Attendees will go here</Segment>\r\n      <Segment clearing>\r\n        <span>{activity.description}</span>\r\n        <Button\r\n          as={Link}\r\n          to={`/activities/${activity.id}`}\r\n          floated='right'\r\n          content='View'\r\n          color='blue'\r\n        />\r\n      </Segment>\r\n    </Segment.Group>\r\n  );\r\n};\r\n\r\nexport default ActivitiyListItem;\r\n","C:\\Users\\Faruk\\Desktop\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetailedChat.tsx",[],"C:\\Users\\Faruk\\Desktop\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetailedInfo.tsx",[],"C:\\Users\\Faruk\\Desktop\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetailedHeader.tsx",["162"],"import { resolveModuleNameFromCache } from \"typescript\";\r\nimport React from \"react\";\r\nimport { Button, Header, Item, Segment, Image } from \"semantic-ui-react\";\r\nimport { IActivity } from \"../../../app/models/activity\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { format } from \"date-fns\";\r\n\r\nconst activityImageStyle = {\r\n  filter: \"brightness(30%)\",\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n  position: \"absolute\",\r\n  bottom: \"5%\",\r\n  left: \"5%\",\r\n  width: \"100%\",\r\n  height: \"auto\",\r\n  color: \"white\",\r\n};\r\n\r\nconst ActivityDetailedHeader: React.FC<{ activity: IActivity }> = ({\r\n  activity,\r\n}) => {\r\n  return (\r\n    <div>\r\n      <Segment.Group>\r\n        <Segment basic attached='top' style={{ padding: \"0\" }}>\r\n          <Image\r\n            src={`/assets/categoryImages/${activity.category}.jpg`}\r\n            fluid\r\n            style={activityImageStyle}\r\n          />\r\n          <Segment style={activityImageTextStyle} basic>\r\n            <Item.Group>\r\n              <Item>\r\n                <Item.Content>\r\n                  <Header\r\n                    size='huge'\r\n                    content={activity.title}\r\n                    style={{ color: \"white\" }}\r\n                  />\r\n                  <p>{format(activity.date, \"eeee do MMMM\")}</p>\r\n                  <p>\r\n                    Hosted by <strong>Bob</strong>\r\n                  </p>\r\n                </Item.Content>\r\n              </Item>\r\n            </Item.Group>\r\n          </Segment>\r\n        </Segment>\r\n        <Segment clearing attached='bottom'>\r\n          <Button color='teal'>Join Activity</Button>\r\n          <Button>Cancel attendance</Button>\r\n          <Button\r\n            color='orange'\r\n            floated='right'\r\n            as={Link}\r\n            to={`/manage/${activity.id}`}\r\n          >\r\n            Manage Event\r\n          </Button>\r\n        </Segment>\r\n      </Segment.Group>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default observer(ActivityDetailedHeader);\r\n","C:\\Users\\Faruk\\Desktop\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetailedSideBar.tsx",[],"C:\\Users\\Faruk\\Desktop\\Reactivities\\client-app\\src\\app\\layout\\NotFound.tsx",[],"C:\\Users\\Faruk\\Desktop\\Reactivities\\client-app\\src\\app\\common\\form\\TextInput.tsx",[],"C:\\Users\\Faruk\\Desktop\\Reactivities\\client-app\\src\\app\\common\\form\\TextAreaInput.tsx",[],"C:\\Users\\Faruk\\Desktop\\Reactivities\\client-app\\src\\app\\common\\form\\SelectInput.tsx",[],"C:\\Users\\Faruk\\Desktop\\Reactivities\\client-app\\src\\app\\common\\options\\CategoryOptions.ts",[],"C:\\Users\\Faruk\\Desktop\\Reactivities\\client-app\\src\\app\\common\\form\\DateInput.tsx",[],"C:\\Users\\Faruk\\Desktop\\Reactivities\\client-app\\src\\app\\common\\util\\util.ts",[],"C:\\Users\\Faruk\\Desktop\\Reactivities\\client-app\\src\\app\\models\\activity.ts",[],"C:\\Users\\Faruk\\Desktop\\Reactivities\\client-app\\src\\app\\stores\\rootStore.ts",[],"C:\\Users\\Faruk\\Desktop\\Reactivities\\client-app\\src\\app\\stores\\userStore.ts",[],"C:\\Users\\Faruk\\Desktop\\Reactivities\\client-app\\src\\features\\user\\LoginForm.tsx",["163"],"C:\\Users\\Faruk\\Desktop\\Reactivities\\client-app\\src\\app\\stores\\commonStore.ts",[],"C:\\Users\\Faruk\\Desktop\\Reactivities\\client-app\\src\\app\\stores\\modalStore.ts",[],"C:\\Users\\Faruk\\Desktop\\Reactivities\\client-app\\src\\app\\common\\modals\\ModalContainer.tsx",[],"C:\\Users\\Faruk\\Desktop\\Reactivities\\client-app\\src\\app\\common\\form\\ErrorMessage.tsx",[],"C:\\Users\\Faruk\\Desktop\\Reactivities\\client-app\\src\\features\\user\\RegisterForm.tsx",["164"],{"ruleId":"165","severity":1,"message":"166","line":6,"column":10,"nodeType":"167","messageId":"168","endLine":6,"endColumn":23},{"ruleId":"169","replacedBy":"170"},{"ruleId":"171","replacedBy":"172"},{"ruleId":"165","severity":1,"message":"173","line":9,"column":11,"nodeType":"167","messageId":"168","endLine":9,"endColumn":21},{"ruleId":"165","severity":1,"message":"174","line":6,"column":10,"nodeType":"167","messageId":"168","endLine":6,"endColumn":19},{"ruleId":"165","severity":1,"message":"175","line":4,"column":8,"nodeType":"167","messageId":"168","endLine":4,"endColumn":21},{"ruleId":"165","severity":1,"message":"176","line":10,"column":29,"nodeType":"167","messageId":"168","endLine":10,"endColumn":43},{"ruleId":"165","severity":1,"message":"175","line":6,"column":8,"nodeType":"167","messageId":"168","endLine":6,"endColumn":21},{"ruleId":"165","severity":1,"message":"177","line":1,"column":27,"nodeType":"167","messageId":"168","endLine":1,"endColumn":36},{"ruleId":"165","severity":1,"message":"175","line":5,"column":8,"nodeType":"167","messageId":"168","endLine":5,"endColumn":21},{"ruleId":"165","severity":1,"message":"178","line":51,"column":15,"nodeType":"167","messageId":"168","endLine":51,"endColumn":31},{"ruleId":"179","severity":1,"message":"180","line":67,"column":1,"nodeType":"181","endLine":70,"endColumn":2},{"ruleId":"165","severity":1,"message":"182","line":1,"column":17,"nodeType":"167","messageId":"168","endLine":1,"endColumn":27},{"ruleId":"165","severity":1,"message":"183","line":3,"column":30,"nodeType":"167","messageId":"168","endLine":3,"endColumn":35},{"ruleId":"165","severity":1,"message":"184","line":1,"column":10,"nodeType":"167","messageId":"168","endLine":1,"endColumn":36},{"ruleId":"165","severity":1,"message":"183","line":5,"column":32,"nodeType":"167","messageId":"168","endLine":5,"endColumn":37},{"ruleId":"165","severity":1,"message":"183","line":5,"column":32,"nodeType":"167","messageId":"168","endLine":5,"endColumn":37},"@typescript-eslint/no-unused-vars","'BrowserRouter' is defined but never used.","Identifier","unusedVar","no-native-reassign",["185"],"no-negated-in-lhs",["186"],"'isLoggedIn' is assigned a value but never used.","'RootStore' is defined but never used.","'ActivityStore' is defined but never used.","'deleteActivity' is assigned a value but never used.","'FormEvent' is defined but never used.","'initialFormState' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'useContext' is defined but never used.","'Label' is defined but never used.","'resolveModuleNameFromCache' is defined but never used.","no-global-assign","no-unsafe-negation"]